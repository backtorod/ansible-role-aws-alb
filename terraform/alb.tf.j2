resource "aws_security_group" "alb_security_group" {
  name        = "{{ alb_security_group_name }}"
  description = "{{ alb_security_group_description }}"
  vpc_id      = "{{ vpc_id }}"

  ingress {
    from_port   = {{ alb_security_group_ingress_from_port }}
    to_port     = {{ alb_security_group_ingress_to_port }}
    protocol    = "{{ alb_security_group_ingress_protocol }}"
    cidr_blocks = [{% for cidr in alb_security_group_ingress_cidr_blocks %}"{{ cidr }}"{% if not loop.last %}, {% endif %}{% endfor %}]
  }

  egress {
    from_port   = {{ alb_security_group_egress_from_port }}
    to_port     = {{ alb_security_group_egress_to_port }}
    protocol    = "{{ alb_security_group_egress_protocol }}"
    cidr_blocks = [{% for cidr in alb_security_group_egress_cidr_blocks %}"{{ cidr }}"{% if not loop.last %}, {% endif %}{% endfor %}]
  }

  tags = {
    Name = "{{ alb_security_group_name }}"
  }

}

resource "aws_security_group" "target_security_group" {
  name        = "{{ target_security_group_name }}"
  description = "{{ target_security_group_description }}"
  vpc_id      = "{{ vpc_id }}"

  ingress {
    from_port       = {{ target_security_group_ingress_from_port }}
    to_port         = {{ target_security_group_ingress_to_port }}
    protocol        = "{{ target_security_group_ingress_protocol }}"
    security_groups = ["${aws_security_group.alb_security_group.id}"]
  }

  egress {
    from_port   = {{ alb_security_group_egress_from_port }}
    to_port     = {{ alb_security_group_egress_to_port }}
    protocol    = "{{ alb_security_group_egress_protocol }}"
    cidr_blocks = [{% for cidr in target_security_group_egress_cidr_blocks %}"{{ cidr }}"{% if not loop.last %}, {% endif %}{% endfor %}]
  }

  tags = {
    Name = "{{ alb_security_group_name }}"
  }

}

{% if should_preserve_instances|default(false)|bool and current_instances != "" %}
{% for instance in current_instances %}
resource "aws_instance" "{{ instance.split(',')[0] }}" {
  # ...instance configuration...
}

resource "aws_network_interface_sg_attachment" "{{ instance.split(',')[0] }}" {
  security_group_id    = "${aws_security_group.target_security_group.id}"
  network_interface_id = "{{ instance.split(',')[1] }}"
}
{% endfor %}
{% endif %}

resource "aws_alb" "alb" {
  name            = "{{ alb_name }}"
  subnets         = [{% for subnet in alb_subnets %}"{{ subnet }}"{% if not loop.last %}, {% endif %}{% endfor %}]
  security_groups = ["${aws_security_group.alb_security_group.id}"]
  internal        = {{ alb_internal }}
  idle_timeout    = {{ alb_idle_timeout }}

  tags = {
    Name = "{{ alb_name }}"
  }

  access_logs {
    bucket = "{{ alb_access_logs_bucket }}"
    prefix = "{{ alb_access_logs_prefix }}"
  }
}

resource "aws_alb_target_group" "alb_target_group" {
  name     = "{{ alb_target_group_name }}"
  port     = "{{ alb_target_group_port }}"
  protocol = "{{ alb_target_group_protocol }}"
  vpc_id   = "{{ vpc_id }}"

  tags = {
    Name = "{{ alb_name }}-target-group"
  }

  stickiness {
    type            = "{{ alb_target_group_enable_stickiness_type }}"
    cookie_duration = {{ alb_target_group_enable_stickiness_cookie_duration }}
    enabled         = {{ alb_target_group_enable_stickiness }}
  }

  health_check {
    healthy_threshold   = {{ alb_target_group_health_check_healthy_threshold }}
    unhealthy_threshold = {{ alb_target_group_health_check_unhealthy_threshold }}
    timeout             = {{ alb_target_group_health_check_timeout }}
    interval            = {{ alb_target_group_health_check_interval }}
    path                = "{{ alb_target_group_health_check_path }}"
    port                = "{{ alb_target_group_health_check_port }}"
  }
}

resource "aws_alb_listener" "alb_listener" {
  load_balancer_arn = "${aws_alb.alb.arn}"
  port              = {{ alb_listener_port }}
  protocol          = "{{ alb_listener_protocol }}"

  default_action {
    target_group_arn = "${aws_alb_target_group.alb_target_group.arn}"
    type             = "forward"
  }
}

{% for instance in alb_target_group_attachment_instances %}
resource "aws_alb_target_group_attachment" "{{ instance }}" {
  target_group_arn = "${aws_alb_target_group.alb_target_group.arn}"
  target_id        = "{{ instance }}"
  port             = {{ alb_target_group_attachment_port }}
}
{% endfor %}

{# # https://www.terraform.io/docs/providers/aws/r/lb_listener_rule.html
resource "aws_alb_listener_rule" "listener_rule" {
  depends_on   = ["aws_alb_target_group.alb_target_group"]
  listener_arn = "${aws_alb_listener.alb_listener.arn}"
  priority     = "${var.priority}"
  action {
    type             = "forward"
    target_group_arn = "${aws_alb_target_group.alb_target_group.id}"
  }
  condition {
    field  = "path-pattern"
    values = ["${var.alb_path}"]
  }
} #}

{# #Autoscaling Attachment
resource "aws_autoscaling_attachment" "svc_asg_external2" {
  alb_target_group_arn   = "${aws_alb_target_group.alb_target_group.arn}"
  autoscaling_group_name = "${aws_autoscaling_group.svc_asg.id}"
} #}

