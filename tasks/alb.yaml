---

- name: template terraform
  template:
    src: "{{ terraform_context }}/{{ item }}.tf.j2"
    dest: "{{ terraform_context }}/{{ item }}.tf"
  with_items: "{{ templates }}"

- name: initialize terraform
  shell: |
    terraform init {{ terraform_extra_args }}
  args:
    chdir: "{{ terraform_context }}"
  register: terraform_init

- debug: var=terraform_init

# - name: pulling state (if any) from s3 bucket
#   terraform:
#     project_path: "{{ terraform_context }}"
#     state: "present"
#   register: terraform_plan_result

- name: validate current ec2 instances (if any)
  shell: |
    terraform state pull > {{ terraform_output_file }}
  args:
    chdir: "{{ terraform_context }}"

- block:

    - name: fetch current ec2 instances (if any)
      shell: |
        cat {{ terraform_output_file }} | \
          jq -r '.resources[] | select(.type == "aws_instance") | .name + "," + .instances[0].attributes.primary_network_interface_id'
      args:
        chdir: "{{ terraform_context }}"
      register: current_instances_result

    - set_fact:
        current_instances:  "{{ current_instances_result.output }}"

    - debug: var=current_instances

    - name:
      shell:
        terraform import aws_instance.{{ item }} {{ item }} \
          {{ terraform_extra_args }}
      with_items: "{{ alb_target_group_attachment_instances }}"
      args:
        chdir: "{{ terraform_context }}"
      register: terraform_import

    - debug: var=terraform_import

  when: should_preserve_instances|default(false)|bool

- name: check hsl format
  shell: |
    terraform fmt \
      {{ terraform_extra_args }} \
      -check \
      -diff
  args:
    chdir: "{{ terraform_context }}"
  register: terraform_format

- debug: var=terraform_format

- name: check hsl syntax
  shell: |
    terraform validate \
      {{ terraform_extra_args }}
  args:
    chdir: "{{ terraform_context }}"
  register: terraform_syntax

- debug: var=terraform_syntax

- name: plan provisioning
  shell: |
    terraform plan \
      {{ terraform_extra_args }}
  register: terraform_plan
  args:
    chdir: "{{ terraform_context }}"

- debug: var=terraform_plan

- name: apply state
  shell: |
    terraform apply \
      {{ terraform_extra_args }} \
      -auto-approve
  args:
    chdir: "{{ terraform_context }}"
  register: terraform_apply

- debug: var=terraform_apply


